{"version":3,"sources":["components/PostBox.js","components/Header.js","api.js","containers/Home.js","containers/Edit.js","components/CommentPanel.js","containers/Post.js","hooks/usePage.js","App.js","reportWebVitals.js","index.js"],"names":["PostBox","changePage","post","className","onClick","title","subtitle","poster","Date","time","toString","slice","replace","Header","mode","type","style","fontWeight","sendMessage","url","message","a","console","log","res","Mock","mock","postId","number","string","subTitle","parseInt","content","comments","name","array","Home","useState","postList","setPostList","getPostList","useEffect","length","map","i","Edit","Form","useForm","form","TextArea","Input","editPost","validateFields","then","values","now","success","catch","e","window","alert","layout","initialValues","Item","label","rules","required","rows","htmlType","CommentPanel","createComment","Post","setPost","deletePost","data","getPost","comment","author","avatar","size","gap","backgroundColor","icon","UserOutlined","datetime","usePage","setMode","newPage","newPost","undefined","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.518bfcdc.chunk.js","sourcesContent":["const PostBox = ({ changePage, post }) => (\r\n    <div className=\"post-box\">\r\n        <button onClick={() => changePage(\"Post\", post)}>{post.title}</button>\r\n        {post.subtitle && <h2>{post.subtitle}</h2>}\r\n        <h3>Posted by {post.poster} on {new Date(post.time).toString().slice(4,15).replace(/-/g,\"\")}</h3>\r\n    </div>\r\n);\r\n\r\nexport default PostBox;","import { Button } from 'antd';\r\n\r\nconst Header = ({ mode, changePage, post }) => (\r\n    <div className=\"Header vertical\">\r\n        <div className=\"header-panel\">\r\n            <Button type=\"text\" style={{fontWeight: \"bold\"}} onClick={()=>changePage(\"Home\", \"\")}>Home</Button>\r\n        </div>\r\n        {(() => {\r\n            switch (mode) {\r\n            case 'Home':\r\n                return <h1>My Blog</h1>;\r\n            case 'Edit':\r\n                return <h1>Edit Post</h1>;\r\n            case 'Add':\r\n                return <h1>Add Post</h1>;\r\n            case 'Post':\r\n                return (\r\n                    <div className=\"header-post-title\">\r\n                        <h1>{post.title}</h1>\r\n                        <h3>Posted by {post.poster} on {new Date(post.time).toString().slice(4,15).replace(/-/g,\"\")}</h3>\r\n                    </div>\r\n                );\r\n            default :\r\n                return <></>;\r\n        }})()}\r\n    </div>\r\n);\r\n\r\nexport default Header;","// import axios from 'axios'\r\n\r\n// const instance = axios.create({ baseURL: 'http://localhost:5000' });\r\n\r\nimport Mock from 'mockjs';\r\n\r\nconst sendMessage = async (type, url, message) => {\r\n    console.log(\"use api:\", type, url, message);\r\n    let res;\r\n    switch(type){\r\n        case \"post\":\r\n            try{\r\n                if(url === \"post/edit\")\r\n                    res = \"succeed to edit\";\r\n                else if(url === \"post/delete\")\r\n                    res = \"succeed to delete\";\r\n                else if(url === \"comment\")\r\n                    res = \"succeed to add comment\"\r\n                return res;\r\n            }catch(e){\r\n                console.log(e);\r\n            }\r\n            break;\r\n        case \"get\":\r\n            try{\r\n                // res = await instance.get(url, message);\r\n                if(url === \"post/list\")\r\n                {\r\n                    res = Mock.mock({\r\n                        \"array|5-10\": [\r\n                            {\r\n                                postId: Mock.mock({\r\n                                    \"number|1-100\": 100\r\n                                }).number,\r\n                                title: Mock.mock({\"string|10-30\": \"★\"}).string,\r\n                                subTitle: Mock.mock({\"string|5-10\": \"★\"}).string,\r\n                                poster: Mock.mock({\"string|5-10\": \"★\"}).string,\r\n                                time: parseInt(Mock.mock('@datetime(\"T\")')),\r\n                            },\r\n                        ]\r\n                    })\r\n                }\r\n                else if(url === \"post/detail\")\r\n                {\r\n                    res = {\r\n                        postId: message.postId,\r\n                        title: Mock.mock({\"string|10-30\": \"★\"}).string,\r\n                        subTitle: Mock.mock({\"string|5-10\": \"★\"}).string,\r\n                        content: Mock.mock({\"string|100-500\": \"★\"}).string,\r\n                        poster:  Mock.mock({\"string|5-10\": \"★\"}).string,\r\n                        time: parseInt(Mock.mock('@datetime(\"T\")')),\r\n                        comments: Mock.mock({\r\n                            \"array|1-5\": [\r\n                                {\r\n                                    name: Mock.mock({\"string|5-10\": \"★\"}).string,\r\n                                    message: Mock.mock({\"string|10-30\": \"★\"}).string,\r\n                                    time: parseInt(Mock.mock('@datetime(\"T\")'))\r\n                                }\r\n                            ]\r\n                        }).array\r\n                    }\r\n                }\r\n                return res;\r\n            }\r\n            catch(e){\r\n                console.log(e);\r\n            }\r\n            break;\r\n        default:\r\n            return [];\r\n    };\r\n}\r\n\r\nexport { sendMessage } ","import { useState, useEffect } from 'react';\r\nimport { Divider, Button } from 'antd';\r\nimport PostBox from '../components/PostBox';\r\nimport Header from '../components/Header';\r\nimport { sendMessage } from '../api';\r\nimport Mock from 'mockjs';\r\nconst Home = ({ changePage }) => {\r\n    const [ postList, setPostList] = useState([]);\r\n\r\n    const getPostList = async() => {\r\n        const { array } = await sendMessage(\"get\", \"post/list\");\r\n        console.log(\"set post list :\", array[0].time, new Date(parseInt(array[0].time, 10)).toString());\r\n        setPostList(array);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(postList.length === 0){\r\n            //use api to get data\r\n            //console.log(\"get all post\");\r\n            getPostList();\r\n        }\r\n    }, [postList]);\r\n\r\n    return (\r\n        <div className=\"vertical\">\r\n            <Header mode={\"Home\"} changePage={changePage}/>\r\n            <div className=\"content\">\r\n                <Button type=\"primary\" onClick={()=>changePage(\"Edit\")}>Add Post</Button>\r\n                <div className=\"post-list\">\r\n                    {postList.map((post, i) => (\r\n                        <div key={i}>\r\n                            <PostBox changePage={changePage} post={post}/>\r\n                            <Divider/>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import { message, Button, Form, Input } from 'antd';\r\nimport Header from '../components/Header';\r\nimport { sendMessage } from '../api';\r\n\r\nconst Edit = ({ changePage, post }) => {\r\n    const [form] = Form.useForm();\r\n    const { TextArea } = Input;\r\n\r\n    const editPost = async() => {\r\n        form.validateFields().then(async(values) => {\r\n        const res = await sendMessage(\"post\", \"post/edit\", {\r\n            title: values.title, \r\n            subTitle: values.subTitle, \r\n            content: values.content,\r\n            time: Date.now()\r\n        });\r\n        message.success(res);\r\n    }).catch((e) => { window.alert(e); });\r\n    }\r\n\r\n    return(\r\n        <div className=\"vertical\">\r\n            {post.postId===-1 ? <Header mode={\"Add\"} changePage={changePage}/> : <Header mode={\"Edit\"} changePage={changePage}/>}\r\n            <div className=\"content\">\r\n                <Form \r\n                    form={form} \r\n                    layout=\"vertical\"\r\n                    initialValues={{\r\n                        \"title\": post.title,\r\n                        \"subtitle\": post.subTitle,\r\n                        \"content\": post.content\r\n                    }}\r\n                >\r\n                    <Form.Item\r\n                        label=\"Title\"\r\n                        name=\"title\"\r\n                        rules={[{ \r\n                            required: true, \r\n                            message: 'Please input your title!'\r\n                        }]}\r\n                        \r\n                    >\r\n                        <Input/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Subtitle\"\r\n                        name=\"subtitle\"\r\n                        rules={[{ \r\n                            required: false, \r\n                        }]}\r\n                    >\r\n                        <Input/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Content\"\r\n                        name=\"content\"\r\n                        rules={[{ \r\n                            required: true, \r\n                            message: 'Please input your content!' \r\n                        }]}\r\n                    >\r\n                        <TextArea rows={5}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" onClick={editPost}>\r\n                            SEND\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Edit;","import { message, Button, Form, Input } from 'antd';\r\nimport { sendMessage } from '../api';\r\n\r\nconst CommentPanel = () => {\r\n    const [form] = Form.useForm();\r\n    const { TextArea } = Input;\r\n\r\n    const createComment = async() => {\r\n        form.validateFields().then(async(values) => {\r\n        const res = await sendMessage(\"post\", \"comment\", {\r\n            name: values.name, \r\n            message: values.message, \r\n            time: Date.now()\r\n        });\r\n        message.success(res);\r\n    }).catch((e) => { window.alert(e); });\r\n    }\r\n\r\n    return (\r\n        <Form form={form} layout=\"vertical\">\r\n            <Form.Item\r\n                label=\"Name\"\r\n                name=\"name\"\r\n                rules={[{ \r\n                    required: true, \r\n                    message: 'Please input your name!'\r\n                }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Message\"\r\n                name=\"message\"\r\n                rules={[{ \r\n                    required: true, \r\n                    message: 'Please input your message!' \r\n                }]}\r\n            >\r\n                <TextArea rows={5} />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" onClick={createComment}>\r\n                    SEND\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default CommentPanel;","import { useState, useEffect } from 'react';\r\nimport { Modal, message, Button, Comment, Avatar, Tooltip } from 'antd';\r\nimport CommentPanel from '../components/CommentPanel';\r\nimport Header from '../components/Header';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { sendMessage } from '../api';\r\n\r\nconst Post = ({ changePage, postId }) => {\r\n    const [post, setPost] = useState({\r\n        postId: -1,\r\n        title: \"\",\r\n        subTitle: \"\",\r\n        poster: \"\",\r\n        content: \"\",\r\n        time: Date(2014, 1, 1),\r\n        comments: [{name: \"\", message: \"\"}]\r\n    });\r\n\r\n    const deletePost = async() => {\r\n        const res = await sendMessage(\"post\", \"post/delete\", {postId});\r\n        message.success(res);\r\n        changePage(\"Home\");\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(postId !== -1 && post.postId === -1){\r\n            //use api to get data\r\n            //console.log(\"get post\");\r\n\r\n            const getPost = async() => {\r\n                const data = await sendMessage(\"get\", \"post/detail\", {postId});\r\n                setPost(data);\r\n            }\r\n\r\n            getPost();\r\n        }\r\n    }, [postId, post.postId]);\r\n\r\n    return(\r\n        <div className=\"vertical\">\r\n            <Header mode={\"Post\"} changePage={changePage} post={post}/>\r\n            <div className=\"content\">\r\n                <div className=\"post-panel horizontal\">\r\n                    <Button type=\"lightdark\" onClick={()=>changePage(\"Edit\", post)}>Edit Post</Button>\r\n                    <Button type=\"danger\" onClick={deletePost}>Delete Post</Button>\r\n                </div>\r\n                <pre>{post.content}</pre>\r\n                <div className=\"comment-list\">\r\n                    {post.comments.map((comment, i)=>(\r\n                        <Comment\r\n                            key={i}\r\n                            author={comment.name}\r\n                            avatar={<Avatar \r\n                                size={30} \r\n                                gap={5} \r\n                                style={{ backgroundColor: '#6699CC' }} \r\n                                icon={<UserOutlined />} \r\n                            />}\r\n                            datetime= {\r\n                                <Tooltip title={Date(comment.time).toString()}>\r\n                                <span>{new Date(comment.time).toString().slice(4,15).replace(/-/g,\"\")}</span>\r\n                                </Tooltip>\r\n                            }\r\n                            content={<pre>{comment.message}</pre>}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <CommentPanel />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import { useState } from \"react\";\r\n\r\nconst usePage = () => {\r\n    const [mode, setMode] = useState(\"Home\");\r\n    const [post, setPost] = useState({\r\n        postId: -1,\r\n        title: \"\",\r\n        subTitle: \"\",\r\n        poster: \"\",\r\n        content: \"\",\r\n        time: Date(2014, 1, 1),\r\n        comments: [{name: \"\", message: \"\"}]\r\n    });\r\n\r\n    const changePage = (newPage, newPost) => {\r\n        console.log(\"Change mode :\", newPage);\r\n        setMode(newPage);\r\n        if(newPost !== undefined)\r\n        {\r\n            //console.log(\"Change post :\", newPost);\r\n            setPost(newPost);\r\n        }\r\n        else\r\n        {\r\n            setPost({\r\n                postId: -1,\r\n                title: \"\",\r\n                subTitle: \"\",\r\n                poster: \"\",\r\n                content: \"\",\r\n                time: Date(2014, 1, 1),\r\n                comments: [{name: \"\", message: \"\"}]\r\n            });\r\n        }\r\n    }\r\n\r\n    return { mode, post, changePage };\r\n};\r\n\r\nexport default usePage;","import './App.css';\nimport Home from './containers/Home';\nimport Edit from './containers/Edit';\nimport Post from './containers/Post';\nimport usePage from './hooks/usePage';\n\nfunction App() {\n  const { mode, post, changePage } = usePage();\n  return (\n    <>\n      {(() => {\n        switch (mode) {\n          case 'Home':\n            return <Home changePage={changePage}/>;\n          case 'Edit':\n            return <Edit changePage={changePage} post={post}/>;\n          case 'Post':\n            return <Post changePage={changePage} postId={post.postId}/>;\n          default :\n            return <></>;\n        }\n      })()}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\nimport 'antd-button-color/dist/css/style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}